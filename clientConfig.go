package resProxy

import (
	"crypto/aes"
	"crypto/cipher"
	"fmt"
	"sync"
)

var (
	secretKey = []byte{
		0x62, 0xAC, 0x1D, 0xE9, 0x29, 0x71, 0x19, 0x96, 0xBE, 0x0C, 0x0A, 0x2A,
		0xB5, 0xA0, 0xD1, 0xEF, 0x93, 0x0B, 0x52, 0x24, 0x31, 0x44, 0xDE, 0x69,
		0xC6, 0x0B, 0xB1, 0xE6, 0xCE, 0x33, 0x21, 0xE0,
	}
	hashKey = []byte{
		0x9C, 0xAF, 0x38, 0x25, 0x9C, 0x6F, 0xEE, 0xEE, 0xBC, 0x22, 0x5A, 0xFC,
		0x7B, 0x4E, 0x8B, 0x9E, 0xA1, 0x26, 0x7C, 0xED, 0xB6, 0x5E, 0x3A, 0x04,
		0x9E, 0xF6, 0xE5, 0x29, 0x88, 0x4A, 0x56, 0x99, 0x9C, 0x59, 0x7A, 0xA0,
		0xA8, 0x44, 0xD8, 0x7A, 0x31, 0x3D, 0x9E, 0xE0, 0x95, 0xDE, 0x72, 0x6F,
		0x9A, 0xCD, 0xD5, 0xC3, 0x00, 0x45, 0x6C, 0x0C, 0xBB, 0x29, 0x66, 0x16,
		0x29, 0x7A, 0x7A, 0xF0, 0xED, 0x25, 0xDB, 0x39, 0x9F, 0x19, 0x3F, 0x95,
		0x00, 0x9F, 0xA1, 0xC2, 0x98, 0x95, 0x7E, 0xEC, 0x8C, 0x45, 0xE2, 0x54,
		0xBA, 0x4D, 0xB6, 0x72, 0xF8, 0x2F, 0xFE, 0xB3, 0xBE, 0xE9, 0x3D, 0xC7,
		0x05, 0xA4, 0x2F, 0x96, 0x05, 0x1A, 0x03, 0x44, 0x4E, 0x18, 0xEA, 0xDF,
		0xF1, 0xEB, 0xC0, 0x69, 0x68, 0x40, 0xE7, 0x80, 0x7C, 0x98, 0x2F, 0x07,
		0x5F, 0x26, 0x33, 0x7A, 0x87, 0x7A, 0x70, 0xD2, 0x26, 0x24, 0x29, 0xFE,
		0xF1, 0x14, 0xFA, 0xB7, 0xB4, 0x20, 0x6B, 0xB8, 0xBC, 0xDA, 0x2B, 0x45,
		0x58, 0x3E, 0x7E, 0x0F, 0x99, 0xAB, 0xAA, 0x42, 0x49, 0x8A, 0xB2, 0x0B,
		0xC5, 0xDF, 0x2F, 0xD2, 0x27, 0x91, 0xE5, 0x28, 0xD9, 0x3B, 0x99, 0xDE,
		0xEB, 0x38, 0x17, 0xD0, 0x82, 0x07, 0x65, 0xF9, 0xEE, 0xE6, 0xCC, 0x6B,
		0x8D, 0x89, 0x59, 0x00, 0x96, 0xC5, 0xC3, 0xFF,
	}
	rootCert = []byte{
		0x27, 0x21, 0xA1, 0xC2, 0x1A, 0xC4, 0xE0, 0x93, 0x76, 0x63, 0xC0, 0x1E,
		0x1B, 0xFB, 0xA4, 0xF5, 0x14, 0x1E, 0x15, 0xA7, 0x72, 0x2B, 0x1E, 0x3D,
		0x14, 0x9C, 0x5A, 0x5F, 0xD8, 0x8F, 0xDA, 0x5F, 0x46, 0x9E, 0xEB, 0x9E,
		0xE1, 0x5E, 0x8A, 0x07, 0x74, 0xD8, 0x98, 0x48, 0x43, 0xD5, 0x64, 0x08,
		0x64, 0xFC, 0xCB, 0x27, 0x9A, 0xC7, 0x4B, 0x50, 0x11, 0x9E, 0x32, 0xF4,
		0xA2, 0x56, 0x6B, 0x49, 0xCE, 0xFD, 0x47, 0x41, 0x88, 0x48, 0x98, 0xBC,
		0x75, 0x53, 0x9B, 0x18, 0x40, 0x99, 0xEC, 0x8A, 0x49, 0x3F, 0x51, 0x55,
		0x0B, 0x2A, 0x7F, 0x3E, 0x06, 0x79, 0x47, 0x07, 0x7F, 0xEB, 0xD9, 0xD3,
		0xE5, 0xEB, 0xA9, 0xA1, 0xF8, 0x1A, 0x6A, 0x56, 0x6D, 0x68, 0xFE, 0xBC,
		0x94, 0xAE, 0x2A, 0xF9, 0x18, 0x72, 0xC1, 0x5B, 0xFB, 0x70, 0x95, 0x6E,
		0xFE, 0xDF, 0x87, 0xAC, 0xB4, 0x18, 0xC9, 0x68, 0x59, 0x47, 0xE0, 0x42,
		0x59, 0x19, 0x70, 0x41, 0xC5, 0x34, 0x54, 0x3F, 0xFB, 0xDA, 0x86, 0x0B,
		0xAC, 0x45, 0xF9, 0x29, 0xDF, 0xA3, 0x21, 0xD7, 0xBA, 0xF6, 0xB4, 0x98,
		0x09, 0x73, 0xA7, 0x75, 0x8C, 0xFA, 0x66, 0xCD, 0x4A, 0x83, 0x8A, 0x92,
		0x03, 0x9E, 0x26, 0xEB, 0x4B, 0xE5, 0xE9, 0xE0, 0xD4, 0xE3, 0x98, 0xEF,
		0x06, 0x3D, 0xCE, 0x09, 0x48, 0xE3, 0xA6, 0xB7, 0x5A, 0x82, 0x79, 0xCB,
		0x12, 0xE1, 0x04, 0x1E, 0x3C, 0xF5, 0x5A, 0x7B, 0xB9, 0x24, 0x5C, 0xD5,
		0x4F, 0xDF, 0x44, 0xB6, 0xC1, 0x0C, 0xE5, 0xBE, 0x0C, 0x4B, 0xAE, 0xEE,
		0x98, 0xB7, 0x50, 0xE8, 0xDE, 0xCB, 0x3D, 0x2B, 0xED, 0x8D, 0x92, 0x3B,
		0x60, 0x5F, 0x04, 0xAC, 0x92, 0x83, 0x13, 0x41, 0x9A, 0xE7, 0xB6, 0x81,
		0xBF, 0x39, 0xB8, 0xC5, 0x90, 0x30, 0x69, 0xD2, 0x8E, 0x6F, 0xC5, 0xE3,
		0x7E, 0x4D, 0x05, 0xDD, 0x8D, 0x0E, 0x55, 0xAC, 0x03, 0x65, 0x10, 0xAB,
		0x85, 0x06, 0xFA, 0xE1, 0xA0, 0x6B, 0x21, 0x2B, 0xB6, 0x69, 0x1A, 0x02,
		0x0E, 0x6F, 0x5C, 0x04, 0xC0, 0x28, 0xB5, 0xA4, 0xA3, 0xA0, 0xC0, 0x67,
		0x91, 0x1A, 0xDA, 0x50, 0x8C, 0xE7, 0x4F, 0x15, 0xAB, 0x59, 0xC7, 0x68,
		0x1A, 0xBF, 0xF7, 0x6D, 0x7A, 0x0A, 0x30, 0xA2, 0xCD, 0xF5, 0xFD, 0x1D,
		0x25, 0x92, 0x46, 0x12, 0x9E, 0x3D, 0xFA, 0xEE, 0xA0, 0xE0, 0x54, 0xD3,
		0x3A, 0x7E, 0x20, 0x98, 0x0E, 0xD6, 0x65, 0x5D, 0x92, 0xFE, 0xE8, 0xB7,
		0x3A, 0x91, 0x2F, 0x45, 0x19, 0x28, 0xFF, 0x9C, 0xDB, 0x15, 0xBB, 0x3D,
		0x9B, 0x52, 0xF1, 0x3E, 0x8F, 0x87, 0x39, 0xFE, 0xC3, 0x5E, 0x9D, 0xDC,
		0x62, 0xF5, 0x30, 0x91, 0x11, 0xB0, 0x35, 0x5E, 0x73, 0x55, 0x66, 0xF5,
		0x7E, 0x6F, 0xAE, 0x68, 0xFB, 0x51, 0x10, 0x97, 0xAE, 0xC1, 0x9A, 0x2A,
		0xE2, 0x39, 0x05, 0x71, 0xCA, 0x74, 0x23, 0x56, 0x2F, 0x56, 0x00, 0x76,
		0x52, 0x51, 0x49, 0xF8, 0x57, 0xFD, 0xBF, 0x2B, 0x43, 0x81, 0x14, 0xD7,
		0xD5, 0xC3, 0xDA, 0x3A, 0x7E, 0xAE, 0x4A, 0x8A, 0xC9, 0x1B, 0x1C, 0x3F,
		0xAA, 0x35, 0x68, 0xD8, 0x0D, 0xE6, 0x47, 0xE4, 0x76, 0x29, 0xF3, 0xF1,
		0x8C, 0xC8, 0x2C, 0x4F, 0xDB, 0x90, 0x58, 0xB7, 0xD7, 0xFF, 0xB1, 0x9E,
		0xA2, 0x6D, 0x6F, 0x0F, 0x8E, 0x7B, 0x3D, 0x24, 0xAC, 0x79, 0x7C, 0xE9,
		0x33, 0xC7, 0x86, 0x93, 0x7D, 0x04, 0x8B, 0xC2, 0x0C, 0xCB, 0x74, 0x91,
		0xDE, 0x93, 0x89, 0x12, 0xB6, 0x82, 0xCF, 0x6F, 0x47, 0x0A, 0xD3, 0x99,
		0x19, 0xE0, 0x5F, 0x13, 0xAB, 0x26, 0x60, 0xC0, 0x04, 0xF7, 0xD9, 0x31,
		0xA1, 0xF1, 0x86, 0x33, 0xED, 0xDE, 0xD7, 0xC1, 0xD3, 0x33, 0x9E, 0xD8,
		0xE5, 0xAA, 0x56, 0x7C, 0x1A, 0xB9, 0x76, 0x0C, 0xB3, 0x92, 0x1F, 0xD5,
		0xCB, 0x65, 0xA3, 0x14, 0xC0, 0xE4, 0x43, 0x6F, 0xAB, 0xBF, 0xD1, 0x48,
		0xAA, 0xEC, 0x50, 0x30, 0x91, 0xDE, 0x33, 0xFA, 0x45, 0x4A, 0x6D, 0x83,
		0x1B, 0x9E, 0xED, 0x8E, 0xB5, 0x9C, 0x92, 0xFB, 0x4F, 0xEF, 0x4E, 0xC6,
		0xAF, 0xC4, 0xDD, 0xBF, 0x53, 0xA1, 0xED, 0x93, 0x68, 0x31, 0xBB, 0xA5,
		0x3F, 0xBA, 0xD1, 0x88, 0xE2, 0x1B, 0x13, 0xDA, 0x30, 0x3A, 0x3E, 0xFC,
		0x90, 0x64, 0x8B, 0x0C, 0x35, 0x4D, 0x1E, 0x40, 0xF1, 0xD2, 0x0D, 0x92,
		0xA6, 0x85, 0x5C, 0xF7, 0x7D, 0x2B, 0x10, 0xD4, 0xC0, 0xEB, 0x9E, 0x94,
		0x83, 0xB2, 0x4C, 0x51, 0xCC, 0xC5, 0x80, 0xEA, 0xF1, 0x37, 0x3D, 0x22,
		0xC5, 0xAA, 0x27, 0x0A, 0x8D, 0x77, 0x88, 0x8C, 0x9B, 0xCF, 0xBE, 0x4C,
		0x9D, 0xB9, 0x37, 0x83, 0x81, 0x4A, 0x2B, 0xEB, 0xF7, 0x1F, 0x29, 0x8A,
		0x0A, 0x61, 0xA7, 0xCE, 0xBA, 0x2D, 0x73, 0x57, 0x8F, 0x23, 0xA8, 0xA1,
		0x24, 0x15, 0x8B, 0x8A, 0x89, 0x0D, 0xA9, 0xAD, 0xCE, 0x29, 0x78, 0x94,
		0xB6, 0x56, 0xEB, 0xE3, 0xBF, 0x39, 0x63, 0x7C, 0x22, 0x52, 0xC3, 0x7E,
		0x14, 0x02, 0x15, 0x59, 0x55, 0x6F, 0xBC, 0x21, 0x4D, 0xCC, 0xAF, 0x6B,
		0xCA, 0x74, 0xBC, 0xBA, 0xE8, 0x21, 0xE7, 0x6A, 0x07, 0x9F, 0xF7, 0x45,
		0x7F, 0x85, 0x1A, 0x6C, 0x51, 0xEE, 0x92, 0xD2, 0x97, 0x03, 0xA6, 0x57,
		0x63, 0x28, 0xED, 0xFB, 0x73, 0x74, 0x35, 0x8F, 0x7E, 0x0C, 0x2B, 0x5F,
		0x58, 0xE3, 0xEA, 0x1D, 0x4B, 0xF3, 0xB7, 0x1F, 0x78, 0x3F, 0x0B, 0xA3,
		0x9C, 0x47, 0x3C, 0xBE, 0x83, 0x7C, 0x09, 0xEB, 0xB8, 0x34, 0x94, 0xAE,
		0x6E, 0x2C, 0xB2, 0x9D, 0x16, 0x12, 0x40, 0x37, 0xB1, 0x04, 0x80, 0x0D,
		0x86, 0xB8, 0xD8, 0x91, 0x06, 0xD6, 0x16, 0x68, 0x02, 0x75, 0x80, 0x7A,
		0xD4, 0x3B, 0x4A, 0xAE, 0x83, 0xA6, 0x01, 0x62, 0x4B, 0x90, 0x37, 0x9E,
		0x8E, 0x51, 0x62, 0x71, 0x5F, 0xE2, 0xF0, 0x0F, 0xAD, 0xAE, 0xF4, 0xFA,
		0x2D, 0xEA, 0x87, 0xE5, 0xC1, 0x1C, 0xF6, 0xB6, 0x39, 0xD0, 0xFF, 0x70,
		0x32, 0xD2, 0x38, 0xB9, 0x37, 0xDA, 0xFD, 0x99, 0x92, 0x85, 0x89, 0x4A,
		0x4C, 0xC6, 0xC5, 0x34, 0xB5, 0xE4, 0x10, 0x8F, 0x16, 0x76, 0x57, 0xA1,
		0x25, 0x53, 0x3E, 0xB9, 0x94, 0xF3, 0x9D, 0x7F, 0xEB, 0x41, 0x3B, 0xF9,
		0xA1, 0xD4, 0x38, 0x08, 0xF2, 0x65, 0x16, 0xF4, 0x2E, 0x05, 0x42, 0x1E,
		0xB2, 0xCE, 0x97, 0xFE, 0x42, 0xE4, 0x98, 0xD9, 0x1D, 0xD3, 0xF4, 0x22,
		0xDE, 0x4C, 0x63, 0x58, 0xC3, 0x75, 0x0C, 0x5E, 0xE8, 0x1D, 0x70, 0x2F,
		0xF9, 0x11, 0x19, 0xF8, 0x9D, 0x6D, 0x8B, 0xB2, 0xEC, 0x85, 0xD5, 0x99,
		0x87, 0xEE, 0xA9, 0xDA, 0xE3, 0x6F, 0x01, 0xAE, 0x75, 0x54, 0xE8, 0xA3,
		0xD6, 0xFE, 0xAD, 0x0B, 0x39, 0xBC, 0xF4, 0xAD, 0xB2, 0xDA, 0x06, 0x4B,
		0x73, 0xFB, 0x51, 0x73, 0x2A, 0x82, 0xAC, 0xD9, 0x7B, 0x49, 0x07, 0x05,
		0xC7, 0x3F, 0x9E, 0x47, 0xCA, 0xC8, 0x15, 0xE1, 0xDC, 0x2D, 0xA4, 0xCB,
		0x94, 0x80, 0x1F, 0x49, 0xFD, 0x04, 0xC4, 0xF0, 0xD5, 0x1C, 0xED, 0xCB,
		0x77, 0x8A, 0x5C, 0x73, 0xEC, 0xEA, 0x51, 0x99, 0x5C, 0x8F, 0xEB, 0x2D,
		0x2E, 0xD4, 0x81, 0x05, 0x2D, 0x8F, 0x22, 0x18, 0x45, 0x41, 0x7C, 0x9B,
		0xFE, 0x48, 0xCB, 0xC1, 0x00, 0x2D, 0xA7, 0xB5, 0x41, 0xBF, 0x40, 0x0F,
		0x8B, 0x9B, 0x21, 0xCC, 0xBF, 0x63, 0xE3, 0x90, 0xF3, 0x4C, 0x56, 0xE1,
		0xDF, 0x20, 0x36, 0x5A, 0xF0, 0xA0, 0xEB, 0xAD, 0xF7, 0x7D, 0x2C, 0x74,
		0x1C, 0xFF, 0x4B, 0xFF, 0x3B, 0x96, 0xF9, 0x23, 0x2F, 0x50, 0x5E, 0x8A,
		0xEE, 0xB6, 0xF3, 0x2E, 0xF8, 0x08, 0xAD, 0x93, 0x37, 0x87, 0xC0, 0x4B,
		0x80, 0x44, 0x2B, 0x65, 0xDE, 0xBF, 0x5B, 0x77, 0xE3, 0x6E, 0xAD, 0xF2,
		0xE4, 0x21, 0xF8, 0xE1, 0xBB, 0x21, 0xD4, 0x5A, 0x4A, 0x5A, 0xD9, 0xAD,
		0x8D, 0xA5, 0xB4, 0x29, 0x0E, 0x4F, 0xE9, 0x2A, 0x0E, 0x7A, 0xF6, 0x64,
		0x7B, 0x19, 0xB2, 0x5D, 0x93, 0x92, 0xB8, 0x56, 0x8B, 0x7B, 0x31, 0x85,
		0xF9, 0x22, 0xF4, 0x82, 0xF3, 0x63, 0xC1, 0x81, 0x95, 0x22, 0x44, 0xE2,
		0xF7, 0x35, 0xB4, 0x2F, 0xE6, 0xA1, 0xF6, 0x3B, 0x22, 0x0B, 0x93, 0x1C,
		0xC0, 0x9C, 0x65, 0x1B, 0x25, 0x2B, 0x60, 0xF2, 0xBA, 0x98, 0xC2, 0xE0,
		0x08, 0x27, 0x0A, 0x18, 0x63, 0x34, 0x41, 0x2C, 0x83, 0x97, 0x37, 0xBC,
		0x5E, 0x65, 0xAA, 0x26, 0x0F, 0xBE, 0x5F, 0x62, 0xEF, 0x9F, 0xD8, 0x95,
		0x62, 0xDB, 0x68, 0x2C, 0x6E, 0xC2, 0xBB, 0xAF, 0x7F, 0x12, 0x45, 0xA4,
		0xD7, 0x6B, 0x78, 0x73, 0x83, 0x38, 0x6B, 0x78, 0x50, 0xFA, 0xEF, 0x0F,
		0xFE, 0xB6, 0x0D, 0x7E, 0x8A, 0xD7, 0x28, 0x75, 0x86, 0x39, 0xB4, 0xF5,
		0xB3, 0x91, 0x81, 0x79, 0x41, 0x04, 0x96, 0x0B, 0x31, 0x96, 0x7E, 0xF9,
		0x31, 0x58, 0xDD, 0x7B, 0x50, 0x1D, 0xB1, 0x72, 0x8B, 0x14, 0xEC, 0x18,
	}
	apiServers = []byte{
		0x86, 0x39, 0x68, 0xFF, 0x20, 0xA5, 0x93, 0x10, 0x17, 0x10, 0x4C, 0xD9,
		0xE4, 0x21, 0x48, 0xB4, 0x72, 0x14, 0x57, 0x6A, 0x6F, 0x6C, 0xE1, 0xD6,
		0x49, 0x18, 0x55, 0xF8, 0xBA, 0xA2, 0x9B, 0x2E, 0x09, 0x3F, 0x42, 0x18,
		0x78, 0x35, 0x0C, 0x25, 0x60, 0x9A, 0x9D, 0xDD, 0xDC, 0x64, 0xBD, 0x51,
		0xAE, 0xC3, 0x01, 0xFD, 0x32, 0xE1, 0x87, 0xE7, 0x78, 0x22, 0x33, 0xA9,
		0x86, 0xB5, 0xA8, 0x4A, 0x00, 0x71, 0x8C, 0x5B, 0xAD, 0xD0, 0xCA, 0x77,
		0x62, 0x15, 0xDB, 0x37, 0xF9, 0x29, 0xA6, 0xAD, 0x9D, 0x73, 0xE5, 0x1B,
		0xC9, 0x9D, 0xB6, 0x1A, 0xB4, 0x16, 0xF4, 0xC3, 0x11, 0x0B, 0x97, 0x95,
		0x50, 0xB3, 0x9A, 0x3C, 0x8B, 0x61, 0xAA, 0x08, 0x20, 0xF2, 0x57, 0x1B,
		0x9B, 0x1D, 0x9B, 0x6B, 0xE1, 0xAC, 0x9C, 0xBF, 0xC1, 0xAD, 0x5E, 0x6F,
		0x01,
	}
	clientCert = []byte{
		0xC3, 0x25, 0x53, 0x42, 0x51, 0xDC, 0x88, 0xEB, 0x1B, 0x91, 0xF3, 0x57,
		0x74, 0x45, 0x04, 0xA8, 0x13, 0xFA, 0xA1, 0x42, 0x7F, 0x4E, 0x99, 0x70,
		0xC7, 0xC7, 0xA2, 0x5C, 0x59, 0xB0, 0x7D, 0x0B, 0x89, 0xC0, 0x48, 0x1E,
		0x8E, 0xA1, 0x8B, 0x83, 0xC7, 0xC6, 0xC3, 0x90, 0x7D, 0x16, 0x31, 0x5E,
		0x47, 0x9B, 0xCA, 0x60, 0x58, 0xAB, 0x69, 0x71, 0xB1, 0x42, 0x24, 0x9E,
		0xC0, 0x75, 0xE3, 0x7F, 0xE6, 0xEA, 0x7E, 0x47, 0x39, 0xCC, 0x50, 0x3C,
		0x87, 0x18, 0x2E, 0x1B, 0xA3, 0x54, 0x51, 0xC7, 0xE8, 0x7A, 0x75, 0xAA,
		0x6A, 0xA6, 0x5D, 0xCA, 0x9F, 0x33, 0xE7, 0x18, 0x06, 0x7E, 0x3D, 0x12,
		0x0C, 0xEE, 0x89, 0x20, 0xE9, 0x7E, 0x3E, 0xD5, 0x22, 0x2C, 0xB6, 0x7E,
		0xB2, 0x90, 0x5A, 0x3C, 0xA4, 0x05, 0x4E, 0xBC, 0xE0, 0x97, 0x6B, 0x8D,
		0x3E, 0x95, 0x70, 0xAD, 0xC9, 0x8D, 0x12, 0xB5, 0x15, 0x3C, 0x01, 0x66,
		0x81, 0xB0, 0x11, 0x6E, 0xEF, 0xB2, 0x72, 0xC9, 0x5A, 0x27, 0x54, 0xAC,
		0xB9, 0x68, 0x9B, 0x87, 0xA2, 0x15, 0x5F, 0x8A, 0x0E, 0x40, 0x80, 0xE2,
		0x2F, 0xE5, 0x4C, 0xD1, 0xAD, 0x35, 0x69, 0x6A, 0xB3, 0x39, 0x58, 0x00,
		0x21, 0x27, 0x09, 0xFB, 0x47, 0x4E, 0xEC, 0x22, 0x69, 0x89, 0x64, 0x84,
		0x69, 0x8F, 0xEA, 0x1E, 0x4E, 0xB2, 0x1C, 0xF6, 0xAA, 0xA1, 0x64, 0x69,
		0x5A, 0x88, 0x18, 0x18, 0xD9, 0xB1, 0x2D, 0x7E, 0x61, 0xDB, 0x1C, 0x1A,
		0xFB, 0x1E, 0xBE, 0xD2, 0xAF, 0x7E, 0x75, 0xC9, 0xAA, 0xCC, 0xCC, 0x06,
		0x24, 0x01, 0x29, 0x6D, 0xF3, 0xFA, 0x7C, 0x9A, 0xA5, 0xD6, 0xCE, 0x00,
		0x6D, 0xC5, 0x88, 0xB7, 0x50, 0x0B, 0x3C, 0xD8, 0xEF, 0x58, 0x51, 0x96,
		0x73, 0xFA, 0xDE, 0xF3, 0xDB, 0x83, 0x2A, 0xB4, 0xB6, 0xA9, 0xCA, 0x83,
		0x87, 0x2B, 0xF6, 0xBC, 0xFD, 0xB2, 0x61, 0x9C, 0x02, 0xEF, 0xF2, 0x22,
		0x10, 0x82, 0x3E, 0x76, 0xC5, 0xBE, 0xE0, 0xF0, 0x63, 0x0F, 0x6B, 0xEE,
		0xE6, 0x25, 0x6E, 0x48, 0x1B, 0x2F, 0x60, 0x65, 0x30, 0xC1, 0xA9, 0xF1,
		0x34, 0x53, 0xB2, 0x72, 0x41, 0x0C, 0x54, 0xF5, 0xFD, 0x99, 0x64, 0x55,
		0xFA, 0x57, 0xF5, 0x54, 0x59, 0x3C, 0xD5, 0x6C, 0x98, 0x50, 0x40, 0xE1,
		0xF1, 0x2C, 0x74, 0x32, 0xF4, 0x86, 0xAD, 0x2B, 0x89, 0x07, 0xA9, 0x7B,
		0xB0, 0x87, 0x8A, 0x7D, 0xF0, 0xB2, 0x2A, 0xAE, 0x22, 0xE8, 0xF5, 0x37,
		0x9C, 0xF4, 0x88, 0xD3, 0x4D, 0x98, 0xC3, 0xA0, 0x43, 0x9D, 0xF8, 0xCE,
		0x22, 0x0C, 0xDA, 0x5E, 0xCE, 0xD2, 0xE9, 0x6A, 0x72, 0xC3, 0x3A, 0x7A,
		0x1C, 0xC5, 0x42, 0xB0, 0x8E, 0xEF, 0x5B, 0xC8, 0x81, 0xD5, 0x2E, 0x47,
		0x09, 0x81, 0x83, 0x47, 0xA0, 0x2B, 0x5E, 0x26, 0x16, 0xE9, 0x68, 0xB1,
		0xEA, 0x53, 0x0C, 0xAC, 0xF0, 0x08, 0x78, 0xA8, 0x8B, 0x0D, 0xEE, 0x26,
		0x66, 0x3C, 0xFA, 0x29, 0xB0, 0x04, 0x8B, 0x83, 0xA6, 0x73, 0xEB, 0x92,
		0x61, 0xA7, 0x8F, 0x3E, 0x5E, 0x95, 0x8B, 0x52, 0xDB, 0x98, 0x9E, 0x05,
		0xFA, 0xD0, 0x04, 0x2B, 0xEA, 0x4E, 0x25, 0xB1, 0x74, 0x8A, 0x1D, 0x3E,
		0x93, 0x66, 0x18, 0xB9, 0x44, 0xA5, 0xEB, 0xBC, 0xC4, 0x03, 0x13, 0x3F,
		0x75, 0x19, 0x59, 0xB5, 0x8D, 0xA4, 0x8D, 0x1C, 0x73, 0xA2, 0xD1, 0x05,
		0x16, 0x83, 0xCB, 0x3E, 0x00, 0x44, 0x08, 0xF9, 0x51, 0x59, 0x9C, 0x18,
		0xDC, 0xC7, 0x75, 0x07, 0x5E, 0x92, 0xCF, 0xEA, 0x9D, 0x07, 0xAF, 0x8F,
		0x53, 0xB7, 0x01, 0x0F, 0x0B, 0x0C, 0x45, 0xC6, 0x44, 0xB7, 0x30, 0x5C,
		0xE2, 0x83, 0x36, 0x05, 0xA4, 0x69, 0x38, 0xC3, 0x72, 0x77, 0x1B, 0x65,
		0x31, 0x30, 0x35, 0x3D, 0xDE, 0x9F, 0x6F, 0x03, 0x05, 0x7E, 0xBB, 0xE8,
		0x30, 0x0C, 0xA9, 0x0F, 0xA4, 0x1E, 0x27, 0x52, 0xD8, 0x60, 0x90, 0x88,
		0x9B, 0xD6, 0x13, 0x54, 0xF7, 0xC3, 0xFA, 0x03, 0x77, 0xBF, 0x31, 0x6F,
		0x7F, 0xA6, 0xA2, 0x17, 0xC6, 0x5D, 0x7A, 0x79, 0x96, 0xD0, 0x25, 0xC6,
		0x3B, 0xD4, 0xBE, 0x5D, 0x17, 0x1A, 0x9F, 0xC5, 0x5E, 0x5A, 0x1A, 0x7E,
		0x7A, 0x8D, 0xA5, 0xAC, 0x29, 0xD9, 0xDA, 0x83, 0x14, 0x5B, 0xF0, 0xE3,
		0x42, 0x82, 0xD7, 0xE0, 0x91, 0x1C, 0xE8, 0x32, 0x25, 0x93, 0xD7, 0x5B,
		0x81, 0x20, 0x63, 0x73, 0xC1, 0x74, 0x07, 0xAE, 0x77, 0x6A, 0xF3, 0xA9,
		0x83, 0xC5, 0x19, 0x9E, 0xBD, 0x80, 0xB1, 0x36, 0x9D, 0xAE, 0x47, 0xAA,
		0xAC, 0xB2, 0xD3, 0xB9, 0x03, 0x2B, 0x66, 0xB0, 0x3B, 0xE0, 0x81, 0xAD,
		0x90, 0xEE, 0x8B, 0x5E, 0x65, 0xBD, 0xA3, 0xF9, 0xA1, 0x39, 0x27, 0xFF,
		0x4A, 0xA2, 0x4F, 0xC7, 0x00, 0x67, 0x4F, 0xB7, 0x80, 0x41, 0x41, 0x57,
		0x20, 0xE1, 0x42, 0x9B, 0x6A, 0xAC, 0xBD, 0xFB, 0x46, 0x4E, 0x29, 0x39,
		0x44, 0xFA, 0xE4, 0xA9, 0x61, 0xE1, 0x36, 0x11, 0xE0, 0x98, 0x9D, 0x87,
		0x0E, 0x5B, 0x46, 0x75, 0xCF, 0x60, 0x67, 0x0D, 0xDB, 0xAE, 0xF8, 0x20,
		0x64, 0xDF, 0xF1, 0xDE, 0xC3, 0x7C, 0x5A, 0xF4, 0x81, 0x50, 0xB5, 0x9F,
		0x9B, 0x7C, 0x6B, 0x72, 0x89, 0x44, 0xDA, 0x14, 0xD0, 0x95, 0x08, 0x40,
		0xBB, 0x19, 0xE0, 0xF5, 0xFA, 0xC1, 0x75, 0xF5, 0xDE, 0x8C, 0x36, 0x08,
		0x11, 0x32, 0x6A, 0xD3, 0x25, 0x1B, 0x1A, 0xEF, 0x5E, 0xFE, 0x2C, 0xF5,
		0xE1, 0xD2, 0x85, 0xF2, 0x66, 0x8A, 0x95, 0xDE, 0x77, 0xFC, 0xA8, 0x99,
		0xD8, 0xC7, 0xB9, 0xAD, 0x70, 0x01, 0x26, 0x6E, 0x58, 0x9C, 0xEA, 0xAE,
		0xC5, 0x72, 0xC8, 0xEB, 0xAA, 0xD1, 0xAA, 0x3D, 0x79, 0x65, 0x9C, 0xA4,
		0x80, 0xD2, 0x8D, 0xAA, 0x5C, 0xA4, 0x1C, 0xDC, 0x92, 0x2D, 0xDF, 0x89,
		0x3B, 0xE3, 0x55, 0x29, 0xBA, 0x2C, 0xC4, 0x74, 0x10, 0xAC, 0xB7, 0xFF,
		0xEE, 0xDF, 0xAD, 0xC2, 0x76, 0xA3, 0xF5, 0x3C, 0x2C, 0x42, 0x2F, 0xD1,
		0x44, 0xF4, 0xB1, 0xCB, 0xED, 0x6D, 0x84, 0xB4, 0xA0, 0xBB, 0xF6, 0x13,
		0x8B, 0x51, 0x9A, 0xAF, 0x6C, 0x40, 0xBE, 0xDA, 0xE0, 0xA5, 0xD1, 0x58,
		0x45, 0xC5, 0xBB, 0xF5, 0xD3, 0x90, 0x26, 0x80, 0x9C, 0x1F, 0x12, 0xEB,
		0x48, 0x1F, 0xAD, 0x0A, 0xBC, 0xFD, 0x0B, 0x55, 0x48, 0x41, 0xB2, 0xE6,
		0xA1, 0x29, 0x98, 0xB9, 0x68, 0x34, 0x8B, 0x05, 0x6F, 0x20, 0xD1, 0x00,
		0x9E, 0xD3, 0xB6, 0x78, 0x01, 0x65, 0xE6, 0x2E, 0x8E, 0xE2, 0xCB, 0xCB,
		0x30, 0xDE, 0xF7, 0x45, 0xC9, 0x57, 0x02, 0x9A, 0xA3, 0x6D, 0x6D, 0x5A,
		0x5A, 0xE2, 0x0E, 0x19, 0xB1, 0xAD, 0x71, 0x61, 0x7A, 0x70, 0xAE, 0xDA,
		0x4D, 0xDC, 0xF1, 0xE6, 0xD5, 0x5D, 0x7A, 0x21, 0x63, 0x5F, 0x0C, 0xA6,
		0xB6, 0x05, 0xAC, 0x10, 0x61, 0x0B, 0x7E, 0x40, 0x80, 0xB0, 0x5F, 0x46,
		0xE7, 0x8E, 0xCE, 0xC9, 0x54, 0x30, 0xAE, 0x47, 0xF3, 0x79, 0x87, 0xA3,
		0x6C, 0x20, 0x78, 0xDB, 0x16, 0xCC, 0xA1, 0x77, 0x94, 0xEE, 0xBE, 0x3E,
		0x84, 0xC4, 0xF4, 0x99, 0x31, 0x9E, 0xD5, 0x04, 0x42, 0x67, 0x66, 0xAD,
		0x34, 0xD1, 0x58, 0xD7, 0x08, 0xA0, 0x8E, 0x4B, 0xCB, 0x42, 0x87, 0x69,
		0xCF, 0x1A, 0xB5, 0xF3, 0x03, 0x87, 0x83, 0xF9, 0x29, 0x2C, 0x58, 0x0E,
		0x9D, 0x14, 0xFE, 0xAB, 0xA4, 0xC0, 0x77, 0x2F, 0xBE, 0x74, 0xDB, 0x45,
		0x6A, 0x21, 0x11, 0xD8, 0x39, 0xA5, 0xF8, 0xDD, 0x3D, 0x5E, 0x8F, 0x79,
		0xC0, 0xE7, 0x3D, 0xCB, 0xDB, 0xF4, 0x7D, 0x0B, 0xF3, 0xD6, 0xF2, 0x38,
		0xC1, 0x71, 0xF0, 0xB5, 0x7E,
	}
	clientKey = []byte{
		0x32, 0xF6, 0x58, 0x08, 0x03, 0x8C, 0x59, 0x73, 0x60, 0x7C, 0xC1, 0x09,
		0x68, 0x01, 0xDD, 0x01, 0x6D, 0x4A, 0x04, 0x29, 0xEC, 0xD2, 0x62, 0x05,
		0x50, 0xA0, 0x0D, 0x26, 0xBF, 0xDE, 0xDB, 0x51, 0x7F, 0xDC, 0x11, 0x87,
		0x74, 0xF0, 0x91, 0x87, 0x75, 0xC4, 0x33, 0x31, 0x18, 0x8B, 0x08, 0x73,
		0xF3, 0x81, 0x2D, 0x7B, 0x88, 0x91, 0xDB, 0xD9, 0x34, 0x10, 0x84, 0x6F,
		0xC2, 0x62, 0xBC, 0xD8, 0xCC, 0x0A, 0x92, 0x79, 0xEC, 0x77, 0xE7, 0xCA,
		0x2E, 0xA6, 0xAC, 0x79, 0x97, 0x61, 0x62, 0x0E, 0x42, 0xF6, 0xBF, 0x63,
		0xB5, 0xBB, 0xAB, 0x10, 0xCE, 0x8E, 0xBA, 0x75, 0x4A, 0xA8, 0xC2, 0x29,
		0x27, 0x85, 0x5A, 0xC5, 0x99, 0x5A, 0x49, 0x68, 0xCF, 0x94, 0x02, 0xE7,
		0xB5, 0xB1, 0xE4, 0x80, 0xA9, 0x4E, 0xE2, 0xA2, 0x71, 0x3C, 0xBE, 0xD2,
		0x5E, 0xAA, 0xEB, 0xF4, 0x32, 0xAE, 0xAA, 0xEE, 0xF5, 0xF3, 0x45, 0x94,
		0x50, 0xA1, 0x3D, 0x4E, 0x7E, 0xCB, 0x9B, 0xFB, 0xF8, 0x63, 0x8E, 0xCA,
		0xFC, 0xA2, 0x5A, 0x9F, 0xB2, 0x55, 0x38, 0x70, 0x1D, 0xC6, 0xD0, 0xA0,
		0x43, 0x8A, 0xE0, 0x71, 0xB7, 0x19, 0x20, 0x65, 0x39, 0x10, 0xE5, 0x20,
		0xE6, 0x36, 0x36, 0xB7, 0x3C, 0x0A, 0xE5, 0x2D, 0xB0, 0xC4, 0x9B, 0xB7,
		0xFF, 0xE4, 0xE1, 0x3B, 0x76, 0xBA, 0x06, 0x2C, 0x93, 0x58, 0x8F, 0x0B,
		0x69, 0x02, 0x71, 0x68, 0x26, 0x78, 0x86, 0xBA, 0x49, 0x93, 0xB7, 0x0A,
		0xE2, 0xF5, 0x91, 0x5F, 0xFF, 0xBE, 0xC7, 0x49, 0xAE, 0x43, 0x37, 0x0C,
		0x4E, 0x6F, 0x8F, 0xB6, 0x8C, 0xCD, 0xCE, 0xFB, 0xD6, 0x02, 0x84, 0x88,
		0xAA, 0x93, 0xF1, 0xD7, 0x90, 0xE7, 0x33, 0x30, 0x1B, 0x4A, 0x3E, 0xDE,
		0x47, 0x96, 0x29,
	}
	cls1 = []byte{
		0xE3, 0x12, 0x70, 0x99, 0xF3, 0x73, 0x43, 0x4E, 0x60, 0x37, 0xEB, 0x30,
		0xF3, 0x59, 0x0B, 0x78, 0x1F, 0x09, 0x61, 0x73, 0xA6, 0x7B, 0x13, 0x9C,
		0x21, 0x4E, 0xE8, 0xFB,
	}
	cls2 = []byte{
		0xB8, 0x65, 0x3E, 0xE2, 0x81, 0x78, 0xB1, 0xA2, 0xE6, 0x0A, 0xE5, 0x89,
		0xF5, 0x1C, 0x58, 0x89, 0x86, 0xD6, 0x77, 0xD6, 0xB0, 0x1D, 0x43, 0x63,
		0x2B, 0xA3, 0xAA, 0x66, 0x40, 0xAA, 0x5C, 0xAF, 0x73, 0x76, 0x97, 0x40,
		0x9B, 0xF4, 0x81, 0x36, 0xD3, 0x49, 0x80, 0x3C, 0x52, 0x59, 0x2B, 0x1A,
		0x5E, 0x26, 0x70, 0x79, 0xE8, 0xEE, 0xF3, 0x7D, 0x6D, 0xF3,
	}
	cls3 = []byte{
		0xAD, 0x40, 0xB9, 0xC8, 0x99, 0x00, 0xDC, 0x81, 0xB0, 0xF4, 0xE3, 0xD1,
		0x55, 0xCE, 0xE6, 0xAA, 0x3A, 0x5E, 0x46, 0xD1, 0x4F, 0xE3, 0x84, 0xEC,
		0xAA, 0x62, 0x56, 0x8A, 0xCF, 0x2A, 0x9F, 0x81, 0x17, 0x1E, 0x1C, 0x56,
		0xDD, 0x21, 0x9A, 0x89, 0xAE, 0xF6, 0x8E, 0x8F, 0x56, 0xCB, 0xB5, 0xFE,
		0xC6, 0x96, 0x87, 0x65, 0x42, 0x0D, 0xC2, 0x2F, 0x6F, 0x40, 0xFD,
	}
)

// Decrypt from base64 to decrypted string
func aesDecrypt(key []byte, ciphertext []byte) (string, bool) {
	block, err := aes.NewCipher(key)
	if err != nil {
		return "", false
	}

	if len(ciphertext) < aes.BlockSize {
		return "", false
	}

	iv := ciphertext[:aes.BlockSize]
	ciphertext = ciphertext[aes.BlockSize:]
	stream := cipher.NewCFBDecrypter(block, iv)
	stream.XORKeyStream(ciphertext, ciphertext)
	return fmt.Sprintf("%s", ciphertext), true
}

func getDecryptString(data []byte) string {
	res, ok := aesDecrypt(secretKey, data)
	if !ok {
		return ""
	}
	return res
}

var (
	keyLock       sync.Mutex
	rootDecCrt    string
	hashDecStr    string
	cliDecCert    string
	cliDecKey     string
	apiSvrsDecStr string
	clS1Str       string
	clS2Str       string
	clS3Str       string
)

func getDecRootCrt() string {
	keyLock.Lock()
	defer keyLock.Unlock()
	if len(rootDecCrt) <= 0 {
		rootDecCrt = getDecryptString(rootCert)
	}
	return rootDecCrt
}

func getDecHashStr() string {
	keyLock.Lock()
	defer keyLock.Unlock()
	if len(hashDecStr) <= 0 {
		hashDecStr = getDecryptString(hashKey)
	}
	return hashDecStr
}

func getDecClientCert() string {
	keyLock.Lock()
	defer keyLock.Unlock()
	if len(cliDecCert) <= 0 {
		cliDecCert = getDecryptString(clientCert)
	}
	return cliDecCert
}

func getDecClientKey() string {
	keyLock.Lock()
	defer keyLock.Unlock()
	if len(cliDecKey) <= 0 {
		cliDecKey = getDecryptString(clientKey)
	}
	return cliDecKey
}

func getDecAPIServers() string {
	keyLock.Lock()
	defer keyLock.Unlock()
	if len(apiSvrsDecStr) <= 0 {
		apiSvrsDecStr = getDecryptString(apiServers)
	}
	return apiSvrsDecStr
}

func getDecS1Str() string {
	keyLock.Lock()
	defer keyLock.Unlock()
	if len(clS1Str) <= 0 {
		clS1Str = getDecryptString(cls1)
	}
	return clS1Str
}

func getDecS2Str() string {
	keyLock.Lock()
	defer keyLock.Unlock()
	if len(clS2Str) <= 0 {
		clS2Str = getDecryptString(cls2)
	}
	return clS2Str
}

func getDecS3Str() string {
	keyLock.Lock()
	defer keyLock.Unlock()
	if len(clS3Str) <= 0 {
		clS3Str = getDecryptString(cls3)
	}
	return clS3Str
}
